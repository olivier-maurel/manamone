<script> 'use strict';
    // *
    // * FUNCTIONS : _functions.js.html.twig
    // *

    function addItem($this)
    {
        $.post("{{ path('app_forecast_add') }}", {data: $this.data()},
        function(data){
            if(data['success'] === true) {
                $('#forecast_table').html(data['content']);
                changeEnv({ page: $('.env-container').length-1 });
            }
        });
    }

    function deleteItem($this)
    {
        let swal = Swal.mixin({
            customClass: {
                confirmButton: 'btn btn-success',
                cancelButton: 'btn btn-danger me-2'
            },
            buttonsStyling: false
        });
        
        swal.fire({
            title: `Souhaitez-vous vraiment supprimer "${$this.siblings('.rv-name').text()}"?`,
            text: "Suppression dÃ©finitive",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Supprimer',
            cancelButtonText: 'Annuler',
        }).then((result) => {
            if (result.isConfirmed) {

                $.post("{{ path('app_forecast_delete') }}", {
                    data: $this.data()
                }, function(data){

                    if(data['success'] === true) {

                        let parent = $this.parents(`#${$this.data('code')}_${$this.data('id')}`);
                        $('#forecast_table').css('opacity', '0');
                        setTimeout(function(){
                            $('#forecast_table').html(data['content']);
                            changeEnv({ page: (parent.data('page')-1) });
                        },600);
                        
                        swalToast('success', data['message']);

                    } else {

                        swal.fire(
                            'ERROR!',
                            data['message'],
                            'error'
                        )

                    }
                });

            }
        })
    }

    function editItem($this, e)
    {
        e.preventDefault();

        $.post("{{ path('app_forecast_edit') }}", {
            data: $this.data(),
            form: $this.serialize()
        }, function(data){
            if(data['success'] === true) {
                let swal = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                });
                swal.fire({
                    icon: 'success',
                    title: data['message']
                });
                $('#forecast_table').html(data['content']);
            }
        });

        $('#modal').modal('hide');
    }

    function formItem($this)
    {
        $.post("{{ path('app_forecast_form') }}", {
            data: $this.data()
        }, function(data){
            if(data['success'] === true) {
                $('#modal_content').html(data['content']);
            }
        });
    }

    function changeEnv(data, e)
    {
        let target      = $('#forecast_table');
        let pages       = $('.env-container').length;
        let direction   = Object.keys(data)[0];
        let nbr         = data[direction];
        let value       = nbr * 100;

        if (nbr < 0) return;
        else if (nbr >= pages) return;
    
        addUrlParam('page', '?env='+(nbr+1));

        target.css('opacity', '.7');
        target.css('left', '-'+value+'%');
        setTimeout(function(){
            target.css('opacity', '1');
        }, 350);
    }

    function addUrlParam(page, url)
    {
        if (typeof (history.pushState) != "undefined") {
            var obj = { Page: page, Url: url };
            history.pushState(obj, obj.Page, obj.Url);
        } else {
            alert("Browser does not support HTML5.");
        }

    }

    function swalToast(type, message)
    {
        let swal = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer)
                toast.addEventListener('mouseleave', Swal.resumeTimer)
            }
        });
        swal.fire({
            icon: type,
            title: message
        });
    }   

</script>